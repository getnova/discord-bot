plugins {
    id 'java'
    id 'io.freefair.git-version' version '5.2'
    id 'io.freefair.lombok' version '5.1.1'
    id 'io.freefair.javadoc-utf-8' version '5.1.1'
    id 'io.freefair.javadoc-links' version '5.1.1'
    id 'checkstyle'
    id 'jacoco'
}

group 'net.getnova.backend.module'
version version.toString().startsWith('v') ? version.toString().substring(1) : version

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_14

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    maven {
        url "https://dl.bintray.com/getnova/maven"
    }
    jcenter()
}

dependencies {
    compile 'net.dv8tion:JDA:4.2.0_204'
    compile 'com.sedmelluq:lavaplayer:1.3.50'
    compile 'com.kcthota:emoji4j:6.0'

    implementation 'net.getnova.backend:nova-logging:1.0.6'
    implementation 'net.getnova.backend:nova-service:1.0.6'
    implementation 'net.getnova.backend:nova-injection:1.0.6'
    implementation 'net.getnova.backend:nova-config:1.0.6'
    implementation 'net.getnova.backend:nova-sql:1.0.6'
    implementation 'net.getnova.backend:nova-bootstrap-api:1.0.6'
    runtimeOnly 'net.getnova.backend:nova-bootstrap:1.0.6'
}

jar {
    manifest {
        attributes([
                'Specification-Title'     : project.name,
                'Specification-Vendor'    : 'Nova Project (https://github.com/getnova)',
                'Specification-Version'   : project.version,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.version,
                'Implementation-Vendor'   : 'Nova Project (https://github.com/getnova)',
                'Implementation-Timestamp': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ'),
                'Module-Name'             : project.name,
                'Module-Version'          : project.version,
                'Module-Services'         : 'net.getnova.backend.discord.DiscordBot,' +
                        'net.getnova.backend.discord.feature.music.MusicService'
        ])
    }

    from {
        configurations.compile.collect { it.isDirectory() || it.getName().toLowerCase().endsWith('.pom') ? it : zipTree(it) }
    }
}

lombok {
    config.put('lombok.equalsandhashcode.callsuper', 'CALL')
}

def checkstyleDir = "${rootDir}/config/checkstyle"

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

checkstyleMain {
    configFile = file("${checkstyleDir}/main.xml")
}

checkstyleTest {
    configFile = file("${checkstyleDir}/test.xml")
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
